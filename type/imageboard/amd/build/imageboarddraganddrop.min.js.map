{"version":3,"file":"imageboarddraganddrop.min.js","sources":["../src/imageboarddraganddrop.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import log from 'core/log';\n\nexport const init = () => {\n    // Create an array selectedImage to be able to store some data about the selected image that is moved.\n    let selectedImage = {};\n    selectedImage.number = null;\n    selectedImage.number = null;\n    selectedImage.src = '';\n    // ItemToMove is the div that the selected image is inside AND the title. We do NOT move the image we move the itemtomove-div.\n    selectedImage.itemToMove = null;\n    // ToDo: Add documentation about xoffset?\n    selectedImage.eventlayerX = 0;\n    selectedImage.eventlayerY = 0;\n    selectedImage.width = null;\n    selectedImage.height = null;\n    selectedImage.titlecorrectorX = 0;\n    selectedImage.titlecorrectorY = 0;\n\n    // Store the data about the canvas/background.\n    let canvas = null;\n    let canvaswidth = 600;\n    let canvasheight = 400;\n\n    registerDnDListener();\n\n    /**\n     *  We need two event listeners for drag and drop. One when the dragging starts and one when it ends.\n     */\n    function registerDnDListener() {\n        refreshCanvasSize();\n        canvas.addEventListener(\"dragstart\", dragStart, false);\n        canvas.addEventListener(\"dragend\", dragEnd, false);\n        document.addEventListener(\"canvaschanged\", refreshCanvasSize);\n    }\n\n    /**\n     * Update canvas size. So drag and drop has new boundaries.\n     */\n    function refreshCanvasSize() {\n        canvas = document.getElementById(\"unilabel-imageboard-background-canvas\");\n        canvaswidth = canvas.clientWidth;\n        canvasheight = canvas.clientHeight;\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function dragStart(event) {\n        console.log(\"event.target.getAttribute('id').split('edit-icon-')[1]\",\n            event.target.getAttribute('id').split('edit-icon-')[1]);\n        if (event.target &&\n            event.target.getAttribute('id') &&\n            event.target.getAttribute('id').split('edit-icon-')[1] >= 1) {\n            console.log(\"Icon nummer=\", event.target.getAttribute('id').split('edit-icon-')[1]);\n            return;\n        }\n        // Check if title or image is selected because this leads to different offsets.\n        // We have to do different calculation of x and y position.\n        let selectedType = \"nix\";\n        if (event &&\n            event.explicitOriginalTarget &&\n            event.explicitOriginalTarget.classList &&\n            event.explicitOriginalTarget.classList.contains('unilabel-imageboard-image')) {\n            selectedType = \"image\";\n        } else {\n            selectedType = \"title\";\n        }\n        // ToDo: Check this condition ....  shouldnt it check         selectedType = \"image\"\n        if (event && event.target && event.target.classList.contains('unilabel-imageboard-element-draggable')) {\n            // Image was selected, so we have to store the information about this image.\n            // 1. Get the number of the selected element.\n            let number = event.target.getAttribute('id').split('unilabel-imageboard-element-')[1];\n            // 2. Get imagedata of the selected element.\n            let imagedata = getAllImagedataFromForm(number);\n            // 3. Set the number of the selected image so this image can be updated when dragEnds.\n            selectedImage.number = number;\n            // 4. Collect the other information.\n            selectedImage.title = imagedata.title;\n            selectedImage.titlelineheight = imagedata.titlelineheight;\n            selectedImage.fontsize = imagedata.fontsize;\n            selectedImage.width = imagedata.targetwidth;\n            selectedImage.height = imagedata.targetheight;\n            selectedImage.itemToMove = document.getElementById('unilabel-imageboard-element-' + selectedImage.number);\n            // Attention: layerX and layerY is the relative position of the mouseposition inside div.\n            // So div is the image or the title and the layer depends on this according to the complete element.\n            selectedImage.eventlayerX = event.layerX;\n            selectedImage.eventlayerY = event.layerY;\n            if (selectedType == \"title\") {\n                // If a title is selected then the position is relative to the upper left corner of the title. Thus we\n                // have to use a correction-value because we store the coordinates that belong to the image.\n                selectedImage.titlecorrectorY = selectedImage.fontsize * selectedImage.titlelineheight;\n            } else {\n                selectedImage.titlecorrectorY = 0;\n            }\n        }\n    }\n\n    /**\n     * At the end of drag update the inputfield and set the coordinates into the attribute of the image.\n     *\n     * @param {event} event\n     */\n    function dragEnd(event) {\n        let snap = 1;\n        let snapelement = document.getElementById('unilabeltype-imageboard-snap');\n        if (snapelement !== null && Number.isInteger(Number(snapelement.value))) {\n            snap = snapelement.value;\n        }\n\n        if (event.target &&\n            event.target.getAttribute('id') &&\n            event.target.getAttribute('id').split('edit-icon-')[1] >= 1) {\n            console.log(\"Icon nummerrr=\", event.target.getAttribute('id').split('edit-icon-')[1]);\n            return;\n        }\n        marktargetasselected(event.target);\n\n        if (selectedImage.number !== null) {\n            showSettingsOfImage(selectedImage.number);\n            // Information: snap is an integer and allows to use an snapping grid.\n            // xposition = 123 with snap 10 will be calculated to 120.\n            // xposition = 123 with snap 100 will be calculated to 10.\n            let xposition = calculateXposition(event, snap);\n            let yposition = calculateYposition(event, snap);\n            selectedImage.itemToMove.style.left = xposition + selectedImage.titlecorrectorX + \"px\";\n            selectedImage.itemToMove.style.top = parseInt(yposition) + parseInt(selectedImage.titlecorrectorY) + \"px\";\n\n            // Change the inputfield.\n            const inputPositionX = document.getElementById('id_unilabeltype_imageboard_xposition_' + (selectedImage.number));\n            inputPositionX.value = xposition;\n\n            const inputPositionY = document.getElementById('id_unilabeltype_imageboard_yposition_' + (selectedImage.number));\n            inputPositionY.value = parseInt(yposition) + parseInt(selectedImage.titlecorrectorY);\n\n            // ToDo: duplicate code for update coordinates\n            let coordinates = document.getElementById('unilabel-imageboard-coordinates');\n            coordinates.innerHTML = (parseInt(selectedImage.number) + 1) + \": \" +\n                inputPositionX.value + \" / \" + inputPositionY.value;\n\n            // Reset saved image data\n            selectedImage.number = null;\n            selectedImage.titlecorrectorY = 0;\n        }\n    }\n\n    /**\n     *\n     * @param {target} target\n     */\n    function marktargetasselected(target) {\n        console.log(\"marktargetasselected\");\n        console.log(\"target\", target);\n        let technicalnumber = target.getAttribute('id').split('unilabel-imageboard-element-')[1];\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_image_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            // TODO: Skip removed elements that are still in the dom but hidden.\n            let singleElement = singleElements[i].getAttribute('id');\n            let number = singleElement.split('fitem_id_unilabeltype_imageboard_image_')[1];\n            if (number) {\n                let image = document.getElementById('unilabel-imageboard-imageid-' + number);\n                if (image) {\n                    image.classList.remove(\"selected\");\n                }\n                let title = document.getElementById('id_elementtitle-' + number);\n                if (title) {\n                    title.classList.remove(\"selected\");\n                }\n            }\n        }\n        let selectedimage = document.getElementById('unilabel-imageboard-imageid-' + technicalnumber);\n        selectedimage.classList.add(\"selected\");\n        let selectedtitle = document.getElementById('id_elementtitle-' + technicalnumber);\n        selectedtitle.classList.add(\"selected\");\n    }\n\n    /**\n     * Hides all setting of elements by adding d-none and removes d-none only for element with the specified number.\n     * @param {int} number\n     */\n    function showSettingsOfImage(number) {\n        // In order do know how many elements are existing in the imageboard we search for\n        // fitem_id_unilabeltype_imageboard_title_ . The length tells us how many elements exists.\n        const singleElements = document.querySelectorAll('[id^=\"fitem_id_unilabeltype_imageboard_title_\"]');\n        for (let i = 0; i < singleElements.length; i++) {\n            let wrapperOfElement = getWrapper(i);\n            if (wrapperOfElement && number == i) {\n                // If it is the selected element we have to remove display none (bootstrap class d-none).\n                wrapperOfElement.classList.remove('d-none');\n            } else {\n                // We will hide all other element settings.\n                wrapperOfElement.classList.add('d-none');\n            }\n        }\n    }\n\n    /**\n     * This function looks for an element in the dom that belongs to an given id and then returns the\n     * surrounding wrapper div.\n     *\n     * @param {number} number\n     * @returns {*}\n     */\n    function getWrapper(number) {\n        console.log(\"getWrapper number=\", number);\n        let element = document.getElementById('fitem_id_unilabeltype_imageboard_title_' + number);\n        console.log(\"element =\", element);\n        let wrapperElement = element.closest(\".elementwrapper\");\n        if (wrapperElement) {\n            return wrapperElement;\n        }\n        return null;\n    }\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {int} number of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(number) {\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + number,\n            titlecolor: 'id_unilabeltype_imageboard_titlecolor_colourpicker',\n            titlebackgroundcolor: 'id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker',\n            titlelineheight: 'id_unilabeltype_imageboard_titlelineheight',\n            fontsize: 'id_unilabeltype_imageboard_fontsize',\n            xposition: 'id_unilabeltype_imageboard_xposition_' + number,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + number,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + number,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + number,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + number,\n            borderradius: 'id_unilabeltype_imageboard_borderradius_' + number,\n        };\n\n        let imagedata = {};\n        imagedata.title = document.getElementById(imageids.title).value;\n        imagedata.titlecolor = document.getElementById(imageids.titlecolor).value;\n        imagedata.titlebackgroundcolor = document.getElementById(imageids.titlebackgroundcolor).value;\n        imagedata.titlelineheight = document.getElementById(imageids.titlelineheight).value;\n        imagedata.fontsize = document.getElementById(imageids.fontsize).value;\n        imagedata.xposition = document.getElementById(imageids.xposition).value;\n        imagedata.yposition = document.getElementById(imageids.yposition).value;\n        imagedata.targetwidth = document.getElementById(imageids.targetwidth).value;\n        imagedata.targetheight = document.getElementById(imageids.targetheight).value;\n\n        // Src der Draftfile ermitteln.\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + number + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = '';\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata.src = src;\n        imagedata.border = document.getElementById(imageids.border).value;\n        imagedata.borderradius = document.getElementById(imageids.borderradius).value;\n\n        return imagedata;\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @param {int} snap\n     * @returns {number}\n     */\n    function calculateXposition(event, snap) {\n        let canvasboundings = canvas.getBoundingClientRect();\n        let xposition = event.clientX - canvasboundings.left - selectedImage.eventlayerX;\n\n        if (xposition < 0) {\n            xposition = 0;\n        }\n        if (xposition >= canvaswidth - selectedImage.width) {\n            xposition = canvaswidth - selectedImage.width;\n        }\n        return Math.round(xposition / snap) * snap;\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @param {int} snap\n     * @returns {number}\n     */\n    function calculateYposition(event, snap) {\n        var canvasboundings = canvas.getBoundingClientRect();\n        var yposition = event.clientY - canvasboundings.top - selectedImage.eventlayerY;\n        if (yposition < 0) {\n            yposition = 0;\n        }\n        if (yposition >= canvasheight - selectedImage.height) {\n            yposition = canvasheight - selectedImage.height;\n        }\n        return Math.round(yposition / snap) * snap;\n    }\n};\n"],"names":["selectedImage","number","src","itemToMove","eventlayerX","eventlayerY","width","height","titlecorrectorX","titlecorrectorY","canvas","canvaswidth","canvasheight","refreshCanvasSize","document","getElementById","clientWidth","clientHeight","dragStart","event","console","log","target","getAttribute","split","selectedType","explicitOriginalTarget","classList","contains","imagedata","imageids","title","titlecolor","titlebackgroundcolor","titlelineheight","fontsize","xposition","yposition","targetwidth","targetheight","border","borderradius","value","imagetag","getElementsByTagName","length","getAllImagedataFromForm","layerX","layerY","dragEnd","snap","snapelement","Number","isInteger","technicalnumber","singleElements","querySelectorAll","i","image","remove","add","marktargetasselected","wrapperOfElement","getWrapper","showSettingsOfImage","canvasboundings","getBoundingClientRect","clientX","left","Math","round","calculateXposition","clientY","top","calculateYposition","style","parseInt","inputPositionX","inputPositionY","innerHTML","element","wrapperElement","closest","addEventListener"],"mappings":"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"}